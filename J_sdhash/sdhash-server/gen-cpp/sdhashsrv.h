/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sdhashsrv_H
#define sdhashsrv_H

#include <TProcessor.h>
#include "sdhashsrv_types.h"

namespace sdhash {

class sdhashsrvIf {
 public:
  virtual ~sdhashsrvIf() {}
  virtual void ping() = 0;
  virtual void setList(std::string& _return, const bool json) = 0;
  virtual void displaySet(std::string& _return, const int32_t num1) = 0;
  virtual void displayContents(std::string& _return, const int32_t num1) = 0;
  virtual void compareAll(const int32_t num1, const int32_t threshold, const int32_t resultID) = 0;
  virtual void compareTwo(const int32_t num1, const int32_t num2, const int32_t threshold, const int32_t sample, const int32_t resultID) = 0;
  virtual int32_t loadSet(const std::string& filename, const int32_t hashsetID) = 0;
  virtual int32_t saveSet(const int32_t num1, const std::string& filename) = 0;
  virtual int32_t createHashsetID() = 0;
  virtual void hashString(const std::string& setname, const std::vector<std::string> & filenames, const int32_t blocksize, const int32_t hashsetID, const int32_t searchIndex) = 0;
  virtual void displaySourceList(std::vector<std::string> & _return) = 0;
  virtual void getHashsetName(std::string& _return, const int32_t num1) = 0;
  virtual void displayResult(std::string& _return, const int32_t resultID) = 0;
  virtual void displayResultsList(std::string& _return, const std::string& user, const bool json) = 0;
  virtual int32_t createResultID(const std::string& user) = 0;
  virtual void displayResultStatus(std::string& _return, const int32_t resultID) = 0;
  virtual void displayResultDuration(std::string& _return, const int32_t resultID) = 0;
  virtual void displayResultInfo(std::string& _return, const int32_t resultID) = 0;
  virtual bool removeResult(const int32_t resultID) = 0;
  virtual bool saveResult(const int32_t resultID, const std::string& result, const std::string& info) = 0;
  virtual void shutdown() = 0;
};

class sdhashsrvIfFactory {
 public:
  typedef sdhashsrvIf Handler;

  virtual ~sdhashsrvIfFactory() {}

  virtual sdhashsrvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(sdhashsrvIf* /* handler */) = 0;
};

class sdhashsrvIfSingletonFactory : virtual public sdhashsrvIfFactory {
 public:
  sdhashsrvIfSingletonFactory(const boost::shared_ptr<sdhashsrvIf>& iface) : iface_(iface) {}
  virtual ~sdhashsrvIfSingletonFactory() {}

  virtual sdhashsrvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(sdhashsrvIf* /* handler */) {}

 protected:
  boost::shared_ptr<sdhashsrvIf> iface_;
};

class sdhashsrvNull : virtual public sdhashsrvIf {
 public:
  virtual ~sdhashsrvNull() {}
  void ping() {
    return;
  }
  void setList(std::string& /* _return */, const bool /* json */) {
    return;
  }
  void displaySet(std::string& /* _return */, const int32_t /* num1 */) {
    return;
  }
  void displayContents(std::string& /* _return */, const int32_t /* num1 */) {
    return;
  }
  void compareAll(const int32_t /* num1 */, const int32_t /* threshold */, const int32_t /* resultID */) {
    return;
  }
  void compareTwo(const int32_t /* num1 */, const int32_t /* num2 */, const int32_t /* threshold */, const int32_t /* sample */, const int32_t /* resultID */) {
    return;
  }
  int32_t loadSet(const std::string& /* filename */, const int32_t /* hashsetID */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t saveSet(const int32_t /* num1 */, const std::string& /* filename */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t createHashsetID() {
    int32_t _return = 0;
    return _return;
  }
  void hashString(const std::string& /* setname */, const std::vector<std::string> & /* filenames */, const int32_t /* blocksize */, const int32_t /* hashsetID */, const int32_t /* searchIndex */) {
    return;
  }
  void displaySourceList(std::vector<std::string> & /* _return */) {
    return;
  }
  void getHashsetName(std::string& /* _return */, const int32_t /* num1 */) {
    return;
  }
  void displayResult(std::string& /* _return */, const int32_t /* resultID */) {
    return;
  }
  void displayResultsList(std::string& /* _return */, const std::string& /* user */, const bool /* json */) {
    return;
  }
  int32_t createResultID(const std::string& /* user */) {
    int32_t _return = 0;
    return _return;
  }
  void displayResultStatus(std::string& /* _return */, const int32_t /* resultID */) {
    return;
  }
  void displayResultDuration(std::string& /* _return */, const int32_t /* resultID */) {
    return;
  }
  void displayResultInfo(std::string& /* _return */, const int32_t /* resultID */) {
    return;
  }
  bool removeResult(const int32_t /* resultID */) {
    bool _return = false;
    return _return;
  }
  bool saveResult(const int32_t /* resultID */, const std::string& /* result */, const std::string& /* info */) {
    bool _return = false;
    return _return;
  }
  void shutdown() {
    return;
  }
};


class sdhashsrv_ping_args {
 public:

  sdhashsrv_ping_args() {
  }

  virtual ~sdhashsrv_ping_args() throw() {}


  bool operator == (const sdhashsrv_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sdhashsrv_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_ping_pargs {
 public:


  virtual ~sdhashsrv_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_ping_result {
 public:

  sdhashsrv_ping_result() {
  }

  virtual ~sdhashsrv_ping_result() throw() {}


  bool operator == (const sdhashsrv_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sdhashsrv_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_ping_presult {
 public:


  virtual ~sdhashsrv_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_setList_args__isset {
  _sdhashsrv_setList_args__isset() : json(false) {}
  bool json;
} _sdhashsrv_setList_args__isset;

class sdhashsrv_setList_args {
 public:

  sdhashsrv_setList_args() : json(0) {
  }

  virtual ~sdhashsrv_setList_args() throw() {}

  bool json;

  _sdhashsrv_setList_args__isset __isset;

  void __set_json(const bool val) {
    json = val;
  }

  bool operator == (const sdhashsrv_setList_args & rhs) const
  {
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_setList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_setList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_setList_pargs {
 public:


  virtual ~sdhashsrv_setList_pargs() throw() {}

  const bool* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_setList_result__isset {
  _sdhashsrv_setList_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_setList_result__isset;

class sdhashsrv_setList_result {
 public:

  sdhashsrv_setList_result() : success("") {
  }

  virtual ~sdhashsrv_setList_result() throw() {}

  std::string success;

  _sdhashsrv_setList_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_setList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_setList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_setList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_setList_presult__isset {
  _sdhashsrv_setList_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_setList_presult__isset;

class sdhashsrv_setList_presult {
 public:


  virtual ~sdhashsrv_setList_presult() throw() {}

  std::string* success;

  _sdhashsrv_setList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_displaySet_args__isset {
  _sdhashsrv_displaySet_args__isset() : num1(false) {}
  bool num1;
} _sdhashsrv_displaySet_args__isset;

class sdhashsrv_displaySet_args {
 public:

  sdhashsrv_displaySet_args() : num1(0) {
  }

  virtual ~sdhashsrv_displaySet_args() throw() {}

  int32_t num1;

  _sdhashsrv_displaySet_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  bool operator == (const sdhashsrv_displaySet_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displaySet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displaySet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displaySet_pargs {
 public:


  virtual ~sdhashsrv_displaySet_pargs() throw() {}

  const int32_t* num1;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displaySet_result__isset {
  _sdhashsrv_displaySet_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displaySet_result__isset;

class sdhashsrv_displaySet_result {
 public:

  sdhashsrv_displaySet_result() : success("") {
  }

  virtual ~sdhashsrv_displaySet_result() throw() {}

  std::string success;

  _sdhashsrv_displaySet_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displaySet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displaySet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displaySet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displaySet_presult__isset {
  _sdhashsrv_displaySet_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displaySet_presult__isset;

class sdhashsrv_displaySet_presult {
 public:


  virtual ~sdhashsrv_displaySet_presult() throw() {}

  std::string* success;

  _sdhashsrv_displaySet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_displayContents_args__isset {
  _sdhashsrv_displayContents_args__isset() : num1(false) {}
  bool num1;
} _sdhashsrv_displayContents_args__isset;

class sdhashsrv_displayContents_args {
 public:

  sdhashsrv_displayContents_args() : num1(0) {
  }

  virtual ~sdhashsrv_displayContents_args() throw() {}

  int32_t num1;

  _sdhashsrv_displayContents_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  bool operator == (const sdhashsrv_displayContents_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayContents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayContents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displayContents_pargs {
 public:


  virtual ~sdhashsrv_displayContents_pargs() throw() {}

  const int32_t* num1;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayContents_result__isset {
  _sdhashsrv_displayContents_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayContents_result__isset;

class sdhashsrv_displayContents_result {
 public:

  sdhashsrv_displayContents_result() : success("") {
  }

  virtual ~sdhashsrv_displayContents_result() throw() {}

  std::string success;

  _sdhashsrv_displayContents_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displayContents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayContents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayContents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayContents_presult__isset {
  _sdhashsrv_displayContents_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayContents_presult__isset;

class sdhashsrv_displayContents_presult {
 public:


  virtual ~sdhashsrv_displayContents_presult() throw() {}

  std::string* success;

  _sdhashsrv_displayContents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_compareAll_args__isset {
  _sdhashsrv_compareAll_args__isset() : num1(false), threshold(false), resultID(false) {}
  bool num1;
  bool threshold;
  bool resultID;
} _sdhashsrv_compareAll_args__isset;

class sdhashsrv_compareAll_args {
 public:

  sdhashsrv_compareAll_args() : num1(0), threshold(0), resultID(0) {
  }

  virtual ~sdhashsrv_compareAll_args() throw() {}

  int32_t num1;
  int32_t threshold;
  int32_t resultID;

  _sdhashsrv_compareAll_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  void __set_threshold(const int32_t val) {
    threshold = val;
  }

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  bool operator == (const sdhashsrv_compareAll_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(threshold == rhs.threshold))
      return false;
    if (!(resultID == rhs.resultID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_compareAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_compareAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_compareAll_pargs {
 public:


  virtual ~sdhashsrv_compareAll_pargs() throw() {}

  const int32_t* num1;
  const int32_t* threshold;
  const int32_t* resultID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_compareTwo_args__isset {
  _sdhashsrv_compareTwo_args__isset() : num1(false), num2(false), threshold(false), sample(false), resultID(false) {}
  bool num1;
  bool num2;
  bool threshold;
  bool sample;
  bool resultID;
} _sdhashsrv_compareTwo_args__isset;

class sdhashsrv_compareTwo_args {
 public:

  sdhashsrv_compareTwo_args() : num1(0), num2(0), threshold(0), sample(0), resultID(0) {
  }

  virtual ~sdhashsrv_compareTwo_args() throw() {}

  int32_t num1;
  int32_t num2;
  int32_t threshold;
  int32_t sample;
  int32_t resultID;

  _sdhashsrv_compareTwo_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  void __set_num2(const int32_t val) {
    num2 = val;
  }

  void __set_threshold(const int32_t val) {
    threshold = val;
  }

  void __set_sample(const int32_t val) {
    sample = val;
  }

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  bool operator == (const sdhashsrv_compareTwo_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    if (!(threshold == rhs.threshold))
      return false;
    if (!(sample == rhs.sample))
      return false;
    if (!(resultID == rhs.resultID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_compareTwo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_compareTwo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_compareTwo_pargs {
 public:


  virtual ~sdhashsrv_compareTwo_pargs() throw() {}

  const int32_t* num1;
  const int32_t* num2;
  const int32_t* threshold;
  const int32_t* sample;
  const int32_t* resultID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_loadSet_args__isset {
  _sdhashsrv_loadSet_args__isset() : filename(false), hashsetID(false) {}
  bool filename;
  bool hashsetID;
} _sdhashsrv_loadSet_args__isset;

class sdhashsrv_loadSet_args {
 public:

  sdhashsrv_loadSet_args() : filename(""), hashsetID(0) {
  }

  virtual ~sdhashsrv_loadSet_args() throw() {}

  std::string filename;
  int32_t hashsetID;

  _sdhashsrv_loadSet_args__isset __isset;

  void __set_filename(const std::string& val) {
    filename = val;
  }

  void __set_hashsetID(const int32_t val) {
    hashsetID = val;
  }

  bool operator == (const sdhashsrv_loadSet_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(hashsetID == rhs.hashsetID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_loadSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_loadSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_loadSet_pargs {
 public:


  virtual ~sdhashsrv_loadSet_pargs() throw() {}

  const std::string* filename;
  const int32_t* hashsetID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_loadSet_result__isset {
  _sdhashsrv_loadSet_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_loadSet_result__isset;

class sdhashsrv_loadSet_result {
 public:

  sdhashsrv_loadSet_result() : success(0) {
  }

  virtual ~sdhashsrv_loadSet_result() throw() {}

  int32_t success;

  _sdhashsrv_loadSet_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const sdhashsrv_loadSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_loadSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_loadSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_loadSet_presult__isset {
  _sdhashsrv_loadSet_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_loadSet_presult__isset;

class sdhashsrv_loadSet_presult {
 public:


  virtual ~sdhashsrv_loadSet_presult() throw() {}

  int32_t* success;

  _sdhashsrv_loadSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_saveSet_args__isset {
  _sdhashsrv_saveSet_args__isset() : num1(false), filename(false) {}
  bool num1;
  bool filename;
} _sdhashsrv_saveSet_args__isset;

class sdhashsrv_saveSet_args {
 public:

  sdhashsrv_saveSet_args() : num1(0), filename("") {
  }

  virtual ~sdhashsrv_saveSet_args() throw() {}

  int32_t num1;
  std::string filename;

  _sdhashsrv_saveSet_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  void __set_filename(const std::string& val) {
    filename = val;
  }

  bool operator == (const sdhashsrv_saveSet_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_saveSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_saveSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_saveSet_pargs {
 public:


  virtual ~sdhashsrv_saveSet_pargs() throw() {}

  const int32_t* num1;
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_saveSet_result__isset {
  _sdhashsrv_saveSet_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_saveSet_result__isset;

class sdhashsrv_saveSet_result {
 public:

  sdhashsrv_saveSet_result() : success(0) {
  }

  virtual ~sdhashsrv_saveSet_result() throw() {}

  int32_t success;

  _sdhashsrv_saveSet_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const sdhashsrv_saveSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_saveSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_saveSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_saveSet_presult__isset {
  _sdhashsrv_saveSet_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_saveSet_presult__isset;

class sdhashsrv_saveSet_presult {
 public:


  virtual ~sdhashsrv_saveSet_presult() throw() {}

  int32_t* success;

  _sdhashsrv_saveSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class sdhashsrv_createHashsetID_args {
 public:

  sdhashsrv_createHashsetID_args() {
  }

  virtual ~sdhashsrv_createHashsetID_args() throw() {}


  bool operator == (const sdhashsrv_createHashsetID_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sdhashsrv_createHashsetID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_createHashsetID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_createHashsetID_pargs {
 public:


  virtual ~sdhashsrv_createHashsetID_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_createHashsetID_result__isset {
  _sdhashsrv_createHashsetID_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_createHashsetID_result__isset;

class sdhashsrv_createHashsetID_result {
 public:

  sdhashsrv_createHashsetID_result() : success(0) {
  }

  virtual ~sdhashsrv_createHashsetID_result() throw() {}

  int32_t success;

  _sdhashsrv_createHashsetID_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const sdhashsrv_createHashsetID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_createHashsetID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_createHashsetID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_createHashsetID_presult__isset {
  _sdhashsrv_createHashsetID_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_createHashsetID_presult__isset;

class sdhashsrv_createHashsetID_presult {
 public:


  virtual ~sdhashsrv_createHashsetID_presult() throw() {}

  int32_t* success;

  _sdhashsrv_createHashsetID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_hashString_args__isset {
  _sdhashsrv_hashString_args__isset() : setname(false), filenames(false), blocksize(false), hashsetID(false), searchIndex(false) {}
  bool setname;
  bool filenames;
  bool blocksize;
  bool hashsetID;
  bool searchIndex;
} _sdhashsrv_hashString_args__isset;

class sdhashsrv_hashString_args {
 public:

  sdhashsrv_hashString_args() : setname(""), blocksize(0), hashsetID(0), searchIndex(0) {
  }

  virtual ~sdhashsrv_hashString_args() throw() {}

  std::string setname;
  std::vector<std::string>  filenames;
  int32_t blocksize;
  int32_t hashsetID;
  int32_t searchIndex;

  _sdhashsrv_hashString_args__isset __isset;

  void __set_setname(const std::string& val) {
    setname = val;
  }

  void __set_filenames(const std::vector<std::string> & val) {
    filenames = val;
  }

  void __set_blocksize(const int32_t val) {
    blocksize = val;
  }

  void __set_hashsetID(const int32_t val) {
    hashsetID = val;
  }

  void __set_searchIndex(const int32_t val) {
    searchIndex = val;
  }

  bool operator == (const sdhashsrv_hashString_args & rhs) const
  {
    if (!(setname == rhs.setname))
      return false;
    if (!(filenames == rhs.filenames))
      return false;
    if (!(blocksize == rhs.blocksize))
      return false;
    if (!(hashsetID == rhs.hashsetID))
      return false;
    if (!(searchIndex == rhs.searchIndex))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_hashString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_hashString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_hashString_pargs {
 public:


  virtual ~sdhashsrv_hashString_pargs() throw() {}

  const std::string* setname;
  const std::vector<std::string> * filenames;
  const int32_t* blocksize;
  const int32_t* hashsetID;
  const int32_t* searchIndex;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displaySourceList_args {
 public:

  sdhashsrv_displaySourceList_args() {
  }

  virtual ~sdhashsrv_displaySourceList_args() throw() {}


  bool operator == (const sdhashsrv_displaySourceList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sdhashsrv_displaySourceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displaySourceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displaySourceList_pargs {
 public:


  virtual ~sdhashsrv_displaySourceList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displaySourceList_result__isset {
  _sdhashsrv_displaySourceList_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displaySourceList_result__isset;

class sdhashsrv_displaySourceList_result {
 public:

  sdhashsrv_displaySourceList_result() {
  }

  virtual ~sdhashsrv_displaySourceList_result() throw() {}

  std::vector<std::string>  success;

  _sdhashsrv_displaySourceList_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displaySourceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displaySourceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displaySourceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displaySourceList_presult__isset {
  _sdhashsrv_displaySourceList_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displaySourceList_presult__isset;

class sdhashsrv_displaySourceList_presult {
 public:


  virtual ~sdhashsrv_displaySourceList_presult() throw() {}

  std::vector<std::string> * success;

  _sdhashsrv_displaySourceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_getHashsetName_args__isset {
  _sdhashsrv_getHashsetName_args__isset() : num1(false) {}
  bool num1;
} _sdhashsrv_getHashsetName_args__isset;

class sdhashsrv_getHashsetName_args {
 public:

  sdhashsrv_getHashsetName_args() : num1(0) {
  }

  virtual ~sdhashsrv_getHashsetName_args() throw() {}

  int32_t num1;

  _sdhashsrv_getHashsetName_args__isset __isset;

  void __set_num1(const int32_t val) {
    num1 = val;
  }

  bool operator == (const sdhashsrv_getHashsetName_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_getHashsetName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_getHashsetName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_getHashsetName_pargs {
 public:


  virtual ~sdhashsrv_getHashsetName_pargs() throw() {}

  const int32_t* num1;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_getHashsetName_result__isset {
  _sdhashsrv_getHashsetName_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_getHashsetName_result__isset;

class sdhashsrv_getHashsetName_result {
 public:

  sdhashsrv_getHashsetName_result() : success("") {
  }

  virtual ~sdhashsrv_getHashsetName_result() throw() {}

  std::string success;

  _sdhashsrv_getHashsetName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_getHashsetName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_getHashsetName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_getHashsetName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_getHashsetName_presult__isset {
  _sdhashsrv_getHashsetName_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_getHashsetName_presult__isset;

class sdhashsrv_getHashsetName_presult {
 public:


  virtual ~sdhashsrv_getHashsetName_presult() throw() {}

  std::string* success;

  _sdhashsrv_getHashsetName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_displayResult_args__isset {
  _sdhashsrv_displayResult_args__isset() : resultID(false) {}
  bool resultID;
} _sdhashsrv_displayResult_args__isset;

class sdhashsrv_displayResult_args {
 public:

  sdhashsrv_displayResult_args() : resultID(0) {
  }

  virtual ~sdhashsrv_displayResult_args() throw() {}

  int32_t resultID;

  _sdhashsrv_displayResult_args__isset __isset;

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  bool operator == (const sdhashsrv_displayResult_args & rhs) const
  {
    if (!(resultID == rhs.resultID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displayResult_pargs {
 public:


  virtual ~sdhashsrv_displayResult_pargs() throw() {}

  const int32_t* resultID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResult_result__isset {
  _sdhashsrv_displayResult_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResult_result__isset;

class sdhashsrv_displayResult_result {
 public:

  sdhashsrv_displayResult_result() : success("") {
  }

  virtual ~sdhashsrv_displayResult_result() throw() {}

  std::string success;

  _sdhashsrv_displayResult_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displayResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResult_presult__isset {
  _sdhashsrv_displayResult_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResult_presult__isset;

class sdhashsrv_displayResult_presult {
 public:


  virtual ~sdhashsrv_displayResult_presult() throw() {}

  std::string* success;

  _sdhashsrv_displayResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_displayResultsList_args__isset {
  _sdhashsrv_displayResultsList_args__isset() : user(false), json(false) {}
  bool user;
  bool json;
} _sdhashsrv_displayResultsList_args__isset;

class sdhashsrv_displayResultsList_args {
 public:

  sdhashsrv_displayResultsList_args() : user(""), json(0) {
  }

  virtual ~sdhashsrv_displayResultsList_args() throw() {}

  std::string user;
  bool json;

  _sdhashsrv_displayResultsList_args__isset __isset;

  void __set_user(const std::string& val) {
    user = val;
  }

  void __set_json(const bool val) {
    json = val;
  }

  bool operator == (const sdhashsrv_displayResultsList_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    if (!(json == rhs.json))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultsList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultsList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displayResultsList_pargs {
 public:


  virtual ~sdhashsrv_displayResultsList_pargs() throw() {}

  const std::string* user;
  const bool* json;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultsList_result__isset {
  _sdhashsrv_displayResultsList_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultsList_result__isset;

class sdhashsrv_displayResultsList_result {
 public:

  sdhashsrv_displayResultsList_result() : success("") {
  }

  virtual ~sdhashsrv_displayResultsList_result() throw() {}

  std::string success;

  _sdhashsrv_displayResultsList_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displayResultsList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultsList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultsList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultsList_presult__isset {
  _sdhashsrv_displayResultsList_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultsList_presult__isset;

class sdhashsrv_displayResultsList_presult {
 public:


  virtual ~sdhashsrv_displayResultsList_presult() throw() {}

  std::string* success;

  _sdhashsrv_displayResultsList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_createResultID_args__isset {
  _sdhashsrv_createResultID_args__isset() : user(false) {}
  bool user;
} _sdhashsrv_createResultID_args__isset;

class sdhashsrv_createResultID_args {
 public:

  sdhashsrv_createResultID_args() : user("") {
  }

  virtual ~sdhashsrv_createResultID_args() throw() {}

  std::string user;

  _sdhashsrv_createResultID_args__isset __isset;

  void __set_user(const std::string& val) {
    user = val;
  }

  bool operator == (const sdhashsrv_createResultID_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_createResultID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_createResultID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_createResultID_pargs {
 public:


  virtual ~sdhashsrv_createResultID_pargs() throw() {}

  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_createResultID_result__isset {
  _sdhashsrv_createResultID_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_createResultID_result__isset;

class sdhashsrv_createResultID_result {
 public:

  sdhashsrv_createResultID_result() : success(0) {
  }

  virtual ~sdhashsrv_createResultID_result() throw() {}

  int32_t success;

  _sdhashsrv_createResultID_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const sdhashsrv_createResultID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_createResultID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_createResultID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_createResultID_presult__isset {
  _sdhashsrv_createResultID_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_createResultID_presult__isset;

class sdhashsrv_createResultID_presult {
 public:


  virtual ~sdhashsrv_createResultID_presult() throw() {}

  int32_t* success;

  _sdhashsrv_createResultID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_displayResultStatus_args__isset {
  _sdhashsrv_displayResultStatus_args__isset() : resultID(false) {}
  bool resultID;
} _sdhashsrv_displayResultStatus_args__isset;

class sdhashsrv_displayResultStatus_args {
 public:

  sdhashsrv_displayResultStatus_args() : resultID(0) {
  }

  virtual ~sdhashsrv_displayResultStatus_args() throw() {}

  int32_t resultID;

  _sdhashsrv_displayResultStatus_args__isset __isset;

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  bool operator == (const sdhashsrv_displayResultStatus_args & rhs) const
  {
    if (!(resultID == rhs.resultID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displayResultStatus_pargs {
 public:


  virtual ~sdhashsrv_displayResultStatus_pargs() throw() {}

  const int32_t* resultID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultStatus_result__isset {
  _sdhashsrv_displayResultStatus_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultStatus_result__isset;

class sdhashsrv_displayResultStatus_result {
 public:

  sdhashsrv_displayResultStatus_result() : success("") {
  }

  virtual ~sdhashsrv_displayResultStatus_result() throw() {}

  std::string success;

  _sdhashsrv_displayResultStatus_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displayResultStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultStatus_presult__isset {
  _sdhashsrv_displayResultStatus_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultStatus_presult__isset;

class sdhashsrv_displayResultStatus_presult {
 public:


  virtual ~sdhashsrv_displayResultStatus_presult() throw() {}

  std::string* success;

  _sdhashsrv_displayResultStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_displayResultDuration_args__isset {
  _sdhashsrv_displayResultDuration_args__isset() : resultID(false) {}
  bool resultID;
} _sdhashsrv_displayResultDuration_args__isset;

class sdhashsrv_displayResultDuration_args {
 public:

  sdhashsrv_displayResultDuration_args() : resultID(0) {
  }

  virtual ~sdhashsrv_displayResultDuration_args() throw() {}

  int32_t resultID;

  _sdhashsrv_displayResultDuration_args__isset __isset;

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  bool operator == (const sdhashsrv_displayResultDuration_args & rhs) const
  {
    if (!(resultID == rhs.resultID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultDuration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultDuration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displayResultDuration_pargs {
 public:


  virtual ~sdhashsrv_displayResultDuration_pargs() throw() {}

  const int32_t* resultID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultDuration_result__isset {
  _sdhashsrv_displayResultDuration_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultDuration_result__isset;

class sdhashsrv_displayResultDuration_result {
 public:

  sdhashsrv_displayResultDuration_result() : success("") {
  }

  virtual ~sdhashsrv_displayResultDuration_result() throw() {}

  std::string success;

  _sdhashsrv_displayResultDuration_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displayResultDuration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultDuration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultDuration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultDuration_presult__isset {
  _sdhashsrv_displayResultDuration_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultDuration_presult__isset;

class sdhashsrv_displayResultDuration_presult {
 public:


  virtual ~sdhashsrv_displayResultDuration_presult() throw() {}

  std::string* success;

  _sdhashsrv_displayResultDuration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_displayResultInfo_args__isset {
  _sdhashsrv_displayResultInfo_args__isset() : resultID(false) {}
  bool resultID;
} _sdhashsrv_displayResultInfo_args__isset;

class sdhashsrv_displayResultInfo_args {
 public:

  sdhashsrv_displayResultInfo_args() : resultID(0) {
  }

  virtual ~sdhashsrv_displayResultInfo_args() throw() {}

  int32_t resultID;

  _sdhashsrv_displayResultInfo_args__isset __isset;

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  bool operator == (const sdhashsrv_displayResultInfo_args & rhs) const
  {
    if (!(resultID == rhs.resultID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_displayResultInfo_pargs {
 public:


  virtual ~sdhashsrv_displayResultInfo_pargs() throw() {}

  const int32_t* resultID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultInfo_result__isset {
  _sdhashsrv_displayResultInfo_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultInfo_result__isset;

class sdhashsrv_displayResultInfo_result {
 public:

  sdhashsrv_displayResultInfo_result() : success("") {
  }

  virtual ~sdhashsrv_displayResultInfo_result() throw() {}

  std::string success;

  _sdhashsrv_displayResultInfo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const sdhashsrv_displayResultInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_displayResultInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_displayResultInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_displayResultInfo_presult__isset {
  _sdhashsrv_displayResultInfo_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_displayResultInfo_presult__isset;

class sdhashsrv_displayResultInfo_presult {
 public:


  virtual ~sdhashsrv_displayResultInfo_presult() throw() {}

  std::string* success;

  _sdhashsrv_displayResultInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_removeResult_args__isset {
  _sdhashsrv_removeResult_args__isset() : resultID(false) {}
  bool resultID;
} _sdhashsrv_removeResult_args__isset;

class sdhashsrv_removeResult_args {
 public:

  sdhashsrv_removeResult_args() : resultID(0) {
  }

  virtual ~sdhashsrv_removeResult_args() throw() {}

  int32_t resultID;

  _sdhashsrv_removeResult_args__isset __isset;

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  bool operator == (const sdhashsrv_removeResult_args & rhs) const
  {
    if (!(resultID == rhs.resultID))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_removeResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_removeResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_removeResult_pargs {
 public:


  virtual ~sdhashsrv_removeResult_pargs() throw() {}

  const int32_t* resultID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_removeResult_result__isset {
  _sdhashsrv_removeResult_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_removeResult_result__isset;

class sdhashsrv_removeResult_result {
 public:

  sdhashsrv_removeResult_result() : success(0) {
  }

  virtual ~sdhashsrv_removeResult_result() throw() {}

  bool success;

  _sdhashsrv_removeResult_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const sdhashsrv_removeResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_removeResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_removeResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_removeResult_presult__isset {
  _sdhashsrv_removeResult_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_removeResult_presult__isset;

class sdhashsrv_removeResult_presult {
 public:


  virtual ~sdhashsrv_removeResult_presult() throw() {}

  bool* success;

  _sdhashsrv_removeResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _sdhashsrv_saveResult_args__isset {
  _sdhashsrv_saveResult_args__isset() : resultID(false), result(false), info(false) {}
  bool resultID;
  bool result;
  bool info;
} _sdhashsrv_saveResult_args__isset;

class sdhashsrv_saveResult_args {
 public:

  sdhashsrv_saveResult_args() : resultID(0), result(""), info("") {
  }

  virtual ~sdhashsrv_saveResult_args() throw() {}

  int32_t resultID;
  std::string result;
  std::string info;

  _sdhashsrv_saveResult_args__isset __isset;

  void __set_resultID(const int32_t val) {
    resultID = val;
  }

  void __set_result(const std::string& val) {
    result = val;
  }

  void __set_info(const std::string& val) {
    info = val;
  }

  bool operator == (const sdhashsrv_saveResult_args & rhs) const
  {
    if (!(resultID == rhs.resultID))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_saveResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_saveResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_saveResult_pargs {
 public:


  virtual ~sdhashsrv_saveResult_pargs() throw() {}

  const int32_t* resultID;
  const std::string* result;
  const std::string* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_saveResult_result__isset {
  _sdhashsrv_saveResult_result__isset() : success(false) {}
  bool success;
} _sdhashsrv_saveResult_result__isset;

class sdhashsrv_saveResult_result {
 public:

  sdhashsrv_saveResult_result() : success(0) {
  }

  virtual ~sdhashsrv_saveResult_result() throw() {}

  bool success;

  _sdhashsrv_saveResult_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const sdhashsrv_saveResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const sdhashsrv_saveResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_saveResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _sdhashsrv_saveResult_presult__isset {
  _sdhashsrv_saveResult_presult__isset() : success(false) {}
  bool success;
} _sdhashsrv_saveResult_presult__isset;

class sdhashsrv_saveResult_presult {
 public:


  virtual ~sdhashsrv_saveResult_presult() throw() {}

  bool* success;

  _sdhashsrv_saveResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class sdhashsrv_shutdown_args {
 public:

  sdhashsrv_shutdown_args() {
  }

  virtual ~sdhashsrv_shutdown_args() throw() {}


  bool operator == (const sdhashsrv_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const sdhashsrv_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const sdhashsrv_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class sdhashsrv_shutdown_pargs {
 public:


  virtual ~sdhashsrv_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class sdhashsrvClient : virtual public sdhashsrvIf {
 public:
  sdhashsrvClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  sdhashsrvClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void setList(std::string& _return, const bool json);
  void send_setList(const bool json);
  void recv_setList(std::string& _return);
  void displaySet(std::string& _return, const int32_t num1);
  void send_displaySet(const int32_t num1);
  void recv_displaySet(std::string& _return);
  void displayContents(std::string& _return, const int32_t num1);
  void send_displayContents(const int32_t num1);
  void recv_displayContents(std::string& _return);
  void compareAll(const int32_t num1, const int32_t threshold, const int32_t resultID);
  void send_compareAll(const int32_t num1, const int32_t threshold, const int32_t resultID);
  void compareTwo(const int32_t num1, const int32_t num2, const int32_t threshold, const int32_t sample, const int32_t resultID);
  void send_compareTwo(const int32_t num1, const int32_t num2, const int32_t threshold, const int32_t sample, const int32_t resultID);
  int32_t loadSet(const std::string& filename, const int32_t hashsetID);
  void send_loadSet(const std::string& filename, const int32_t hashsetID);
  int32_t recv_loadSet();
  int32_t saveSet(const int32_t num1, const std::string& filename);
  void send_saveSet(const int32_t num1, const std::string& filename);
  int32_t recv_saveSet();
  int32_t createHashsetID();
  void send_createHashsetID();
  int32_t recv_createHashsetID();
  void hashString(const std::string& setname, const std::vector<std::string> & filenames, const int32_t blocksize, const int32_t hashsetID, const int32_t searchIndex);
  void send_hashString(const std::string& setname, const std::vector<std::string> & filenames, const int32_t blocksize, const int32_t hashsetID, const int32_t searchIndex);
  void displaySourceList(std::vector<std::string> & _return);
  void send_displaySourceList();
  void recv_displaySourceList(std::vector<std::string> & _return);
  void getHashsetName(std::string& _return, const int32_t num1);
  void send_getHashsetName(const int32_t num1);
  void recv_getHashsetName(std::string& _return);
  void displayResult(std::string& _return, const int32_t resultID);
  void send_displayResult(const int32_t resultID);
  void recv_displayResult(std::string& _return);
  void displayResultsList(std::string& _return, const std::string& user, const bool json);
  void send_displayResultsList(const std::string& user, const bool json);
  void recv_displayResultsList(std::string& _return);
  int32_t createResultID(const std::string& user);
  void send_createResultID(const std::string& user);
  int32_t recv_createResultID();
  void displayResultStatus(std::string& _return, const int32_t resultID);
  void send_displayResultStatus(const int32_t resultID);
  void recv_displayResultStatus(std::string& _return);
  void displayResultDuration(std::string& _return, const int32_t resultID);
  void send_displayResultDuration(const int32_t resultID);
  void recv_displayResultDuration(std::string& _return);
  void displayResultInfo(std::string& _return, const int32_t resultID);
  void send_displayResultInfo(const int32_t resultID);
  void recv_displayResultInfo(std::string& _return);
  bool removeResult(const int32_t resultID);
  void send_removeResult(const int32_t resultID);
  bool recv_removeResult();
  bool saveResult(const int32_t resultID, const std::string& result, const std::string& info);
  void send_saveResult(const int32_t resultID, const std::string& result, const std::string& info);
  bool recv_saveResult();
  void shutdown();
  void send_shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class sdhashsrvProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<sdhashsrvIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (sdhashsrvProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_ping(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displaySet(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayContents(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compareAll(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compareTwo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadSet(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveSet(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createHashsetID(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hashString(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displaySourceList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHashsetName(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayResult(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayResultsList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createResultID(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayResultStatus(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayResultDuration(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_displayResultInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeResult(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveResult(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  sdhashsrvProcessor(boost::shared_ptr<sdhashsrvIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &sdhashsrvProcessor::process_ping;
    processMap_["setList"] = &sdhashsrvProcessor::process_setList;
    processMap_["displaySet"] = &sdhashsrvProcessor::process_displaySet;
    processMap_["displayContents"] = &sdhashsrvProcessor::process_displayContents;
    processMap_["compareAll"] = &sdhashsrvProcessor::process_compareAll;
    processMap_["compareTwo"] = &sdhashsrvProcessor::process_compareTwo;
    processMap_["loadSet"] = &sdhashsrvProcessor::process_loadSet;
    processMap_["saveSet"] = &sdhashsrvProcessor::process_saveSet;
    processMap_["createHashsetID"] = &sdhashsrvProcessor::process_createHashsetID;
    processMap_["hashString"] = &sdhashsrvProcessor::process_hashString;
    processMap_["displaySourceList"] = &sdhashsrvProcessor::process_displaySourceList;
    processMap_["getHashsetName"] = &sdhashsrvProcessor::process_getHashsetName;
    processMap_["displayResult"] = &sdhashsrvProcessor::process_displayResult;
    processMap_["displayResultsList"] = &sdhashsrvProcessor::process_displayResultsList;
    processMap_["createResultID"] = &sdhashsrvProcessor::process_createResultID;
    processMap_["displayResultStatus"] = &sdhashsrvProcessor::process_displayResultStatus;
    processMap_["displayResultDuration"] = &sdhashsrvProcessor::process_displayResultDuration;
    processMap_["displayResultInfo"] = &sdhashsrvProcessor::process_displayResultInfo;
    processMap_["removeResult"] = &sdhashsrvProcessor::process_removeResult;
    processMap_["saveResult"] = &sdhashsrvProcessor::process_saveResult;
    processMap_["shutdown"] = &sdhashsrvProcessor::process_shutdown;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~sdhashsrvProcessor() {}
};

class sdhashsrvProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  sdhashsrvProcessorFactory(const ::boost::shared_ptr< sdhashsrvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< sdhashsrvIfFactory > handlerFactory_;
};

class sdhashsrvMultiface : virtual public sdhashsrvIf {
 public:
  sdhashsrvMultiface(std::vector<boost::shared_ptr<sdhashsrvIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~sdhashsrvMultiface() {}
 protected:
  std::vector<boost::shared_ptr<sdhashsrvIf> > ifaces_;
  sdhashsrvMultiface() {}
  void add(boost::shared_ptr<sdhashsrvIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->ping();
    }
  }

  void setList(std::string& _return, const bool json) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->setList(_return, json);
        return;
      } else {
        ifaces_[i]->setList(_return, json);
      }
    }
  }

  void displaySet(std::string& _return, const int32_t num1) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displaySet(_return, num1);
        return;
      } else {
        ifaces_[i]->displaySet(_return, num1);
      }
    }
  }

  void displayContents(std::string& _return, const int32_t num1) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displayContents(_return, num1);
        return;
      } else {
        ifaces_[i]->displayContents(_return, num1);
      }
    }
  }

  void compareAll(const int32_t num1, const int32_t threshold, const int32_t resultID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->compareAll(num1, threshold, resultID);
    }
  }

  void compareTwo(const int32_t num1, const int32_t num2, const int32_t threshold, const int32_t sample, const int32_t resultID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->compareTwo(num1, num2, threshold, sample, resultID);
    }
  }

  int32_t loadSet(const std::string& filename, const int32_t hashsetID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->loadSet(filename, hashsetID);
      } else {
        ifaces_[i]->loadSet(filename, hashsetID);
      }
    }
  }

  int32_t saveSet(const int32_t num1, const std::string& filename) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->saveSet(num1, filename);
      } else {
        ifaces_[i]->saveSet(num1, filename);
      }
    }
  }

  int32_t createHashsetID() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->createHashsetID();
      } else {
        ifaces_[i]->createHashsetID();
      }
    }
  }

  void hashString(const std::string& setname, const std::vector<std::string> & filenames, const int32_t blocksize, const int32_t hashsetID, const int32_t searchIndex) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->hashString(setname, filenames, blocksize, hashsetID, searchIndex);
    }
  }

  void displaySourceList(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displaySourceList(_return);
        return;
      } else {
        ifaces_[i]->displaySourceList(_return);
      }
    }
  }

  void getHashsetName(std::string& _return, const int32_t num1) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHashsetName(_return, num1);
        return;
      } else {
        ifaces_[i]->getHashsetName(_return, num1);
      }
    }
  }

  void displayResult(std::string& _return, const int32_t resultID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displayResult(_return, resultID);
        return;
      } else {
        ifaces_[i]->displayResult(_return, resultID);
      }
    }
  }

  void displayResultsList(std::string& _return, const std::string& user, const bool json) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displayResultsList(_return, user, json);
        return;
      } else {
        ifaces_[i]->displayResultsList(_return, user, json);
      }
    }
  }

  int32_t createResultID(const std::string& user) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->createResultID(user);
      } else {
        ifaces_[i]->createResultID(user);
      }
    }
  }

  void displayResultStatus(std::string& _return, const int32_t resultID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displayResultStatus(_return, resultID);
        return;
      } else {
        ifaces_[i]->displayResultStatus(_return, resultID);
      }
    }
  }

  void displayResultDuration(std::string& _return, const int32_t resultID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displayResultDuration(_return, resultID);
        return;
      } else {
        ifaces_[i]->displayResultDuration(_return, resultID);
      }
    }
  }

  void displayResultInfo(std::string& _return, const int32_t resultID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->displayResultInfo(_return, resultID);
        return;
      } else {
        ifaces_[i]->displayResultInfo(_return, resultID);
      }
    }
  }

  bool removeResult(const int32_t resultID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->removeResult(resultID);
      } else {
        ifaces_[i]->removeResult(resultID);
      }
    }
  }

  bool saveResult(const int32_t resultID, const std::string& result, const std::string& info) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->saveResult(resultID, result, info);
      } else {
        ifaces_[i]->saveResult(resultID, result, info);
      }
    }
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->shutdown();
    }
  }

};

} // namespace

#endif
