// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "sdhashsrv.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::sdhash;

class sdhashsrvHandler : virtual public sdhashsrvIf {
 public:
  sdhashsrvHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  void setList(std::string& _return, const bool json) {
    // Your implementation goes here
    printf("setList\n");
  }

  void displaySet(std::string& _return, const int32_t num1) {
    // Your implementation goes here
    printf("displaySet\n");
  }

  void displayContents(std::string& _return, const int32_t num1) {
    // Your implementation goes here
    printf("displayContents\n");
  }

  void compareAll(const int32_t num1, const int32_t threshold, const int32_t resultID) {
    // Your implementation goes here
    printf("compareAll\n");
  }

  void compareTwo(const int32_t num1, const int32_t num2, const int32_t threshold, const int32_t sample, const int32_t resultID) {
    // Your implementation goes here
    printf("compareTwo\n");
  }

  int32_t loadSet(const std::string& filename, const int32_t hashsetID) {
    // Your implementation goes here
    printf("loadSet\n");
  }

  int32_t saveSet(const int32_t num1, const std::string& filename) {
    // Your implementation goes here
    printf("saveSet\n");
  }

  int32_t createHashsetID() {
    // Your implementation goes here
    printf("createHashsetID\n");
  }

  void hashString(const std::string& setname, const std::vector<std::string> & filenames, const int32_t blocksize, const int32_t hashsetID, const int32_t searchIndex) {
    // Your implementation goes here
    printf("hashString\n");
  }

  void displaySourceList(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("displaySourceList\n");
  }

  void getHashsetName(std::string& _return, const int32_t num1) {
    // Your implementation goes here
    printf("getHashsetName\n");
  }

  void displayResult(std::string& _return, const int32_t resultID) {
    // Your implementation goes here
    printf("displayResult\n");
  }

  void displayResultsList(std::string& _return, const std::string& user, const bool json) {
    // Your implementation goes here
    printf("displayResultsList\n");
  }

  int32_t createResultID(const std::string& user) {
    // Your implementation goes here
    printf("createResultID\n");
  }

  void displayResultStatus(std::string& _return, const int32_t resultID) {
    // Your implementation goes here
    printf("displayResultStatus\n");
  }

  void displayResultDuration(std::string& _return, const int32_t resultID) {
    // Your implementation goes here
    printf("displayResultDuration\n");
  }

  void displayResultInfo(std::string& _return, const int32_t resultID) {
    // Your implementation goes here
    printf("displayResultInfo\n");
  }

  bool removeResult(const int32_t resultID) {
    // Your implementation goes here
    printf("removeResult\n");
  }

  bool saveResult(const int32_t resultID, const std::string& result, const std::string& info) {
    // Your implementation goes here
    printf("saveResult\n");
  }

  void shutdown() {
    // Your implementation goes here
    printf("shutdown\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<sdhashsrvHandler> handler(new sdhashsrvHandler());
  shared_ptr<TProcessor> processor(new sdhashsrvProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

