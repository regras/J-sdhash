#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import sdhashsrv
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '  string setList(bool json)'
  print '  string displaySet(i32 num1)'
  print '  string displayContents(i32 num1)'
  print '  void compareAll(i32 num1, i32 threshold, i32 resultID)'
  print '  void compareTwo(i32 num1, i32 num2, i32 threshold, i32 sample, i32 resultID)'
  print '  i32 loadSet(string filename, i32 hashsetID)'
  print '  i32 saveSet(i32 num1, string filename)'
  print '  i32 createHashsetID()'
  print '  void hashString(string setname,  filenames, i32 blocksize, i32 hashsetID, i32 searchIndex)'
  print '   displaySourceList()'
  print '  string getHashsetName(i32 num1)'
  print '  string displayResult(i32 resultID)'
  print '  string displayResultsList(string user, bool json)'
  print '  i32 createResultID(string user)'
  print '  string displayResultStatus(i32 resultID)'
  print '  string displayResultDuration(i32 resultID)'
  print '  string displayResultInfo(i32 resultID)'
  print '  bool removeResult(i32 resultID)'
  print '  bool saveResult(i32 resultID, string result, string info)'
  print '  void shutdown()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = sdhashsrv.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'setList':
  if len(args) != 1:
    print 'setList requires 1 args'
    sys.exit(1)
  pp.pprint(client.setList(eval(args[0]),))

elif cmd == 'displaySet':
  if len(args) != 1:
    print 'displaySet requires 1 args'
    sys.exit(1)
  pp.pprint(client.displaySet(eval(args[0]),))

elif cmd == 'displayContents':
  if len(args) != 1:
    print 'displayContents requires 1 args'
    sys.exit(1)
  pp.pprint(client.displayContents(eval(args[0]),))

elif cmd == 'compareAll':
  if len(args) != 3:
    print 'compareAll requires 3 args'
    sys.exit(1)
  pp.pprint(client.compareAll(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'compareTwo':
  if len(args) != 5:
    print 'compareTwo requires 5 args'
    sys.exit(1)
  pp.pprint(client.compareTwo(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'loadSet':
  if len(args) != 2:
    print 'loadSet requires 2 args'
    sys.exit(1)
  pp.pprint(client.loadSet(args[0],eval(args[1]),))

elif cmd == 'saveSet':
  if len(args) != 2:
    print 'saveSet requires 2 args'
    sys.exit(1)
  pp.pprint(client.saveSet(eval(args[0]),args[1],))

elif cmd == 'createHashsetID':
  if len(args) != 0:
    print 'createHashsetID requires 0 args'
    sys.exit(1)
  pp.pprint(client.createHashsetID())

elif cmd == 'hashString':
  if len(args) != 5:
    print 'hashString requires 5 args'
    sys.exit(1)
  pp.pprint(client.hashString(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'displaySourceList':
  if len(args) != 0:
    print 'displaySourceList requires 0 args'
    sys.exit(1)
  pp.pprint(client.displaySourceList())

elif cmd == 'getHashsetName':
  if len(args) != 1:
    print 'getHashsetName requires 1 args'
    sys.exit(1)
  pp.pprint(client.getHashsetName(eval(args[0]),))

elif cmd == 'displayResult':
  if len(args) != 1:
    print 'displayResult requires 1 args'
    sys.exit(1)
  pp.pprint(client.displayResult(eval(args[0]),))

elif cmd == 'displayResultsList':
  if len(args) != 2:
    print 'displayResultsList requires 2 args'
    sys.exit(1)
  pp.pprint(client.displayResultsList(args[0],eval(args[1]),))

elif cmd == 'createResultID':
  if len(args) != 1:
    print 'createResultID requires 1 args'
    sys.exit(1)
  pp.pprint(client.createResultID(args[0],))

elif cmd == 'displayResultStatus':
  if len(args) != 1:
    print 'displayResultStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.displayResultStatus(eval(args[0]),))

elif cmd == 'displayResultDuration':
  if len(args) != 1:
    print 'displayResultDuration requires 1 args'
    sys.exit(1)
  pp.pprint(client.displayResultDuration(eval(args[0]),))

elif cmd == 'displayResultInfo':
  if len(args) != 1:
    print 'displayResultInfo requires 1 args'
    sys.exit(1)
  pp.pprint(client.displayResultInfo(eval(args[0]),))

elif cmd == 'removeResult':
  if len(args) != 1:
    print 'removeResult requires 1 args'
    sys.exit(1)
  pp.pprint(client.removeResult(eval(args[0]),))

elif cmd == 'saveResult':
  if len(args) != 3:
    print 'saveResult requires 3 args'
    sys.exit(1)
  pp.pprint(client.saveResult(eval(args[0]),args[1],args[2],))

elif cmd == 'shutdown':
  if len(args) != 0:
    print 'shutdown requires 0 args'
    sys.exit(1)
  pp.pprint(client.shutdown())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
